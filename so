
import math
import random

import numpy as np


def snake_optimization(search_agents_no, max_iter, chung_reynolds, dim, solution_bound):
 
    vec_flag = [1, -1]
    
    food_threshold = 0.25
    
    temp_threshold = 0.6
    
    c1 = 0.5
    
    model_threshold = 0.6
    
    c2 = 0.5
    
    c3 = 2
    
    X = solution_bound[0] + np.random.random_sample((search_agents_no, dim)) * (solution_bound[1] - solution_bound[0])
    
    X = np.matrix(X)
   
    fitness = [0 for i in range(search_agents_no)]
    
    for i in range(search_agents_no):
        fitness[i] = chung_reynolds(X[i, :])
    
    g_best = np.argmin(fitness)
    gy_best = fitness[g_best]
    
    food = X[g_best, :]
    
    male_number = int(np.round(search_agents_no / 2))
    female_number = search_agents_no - male_number
    male = X[0:male_number, :]
    female = X[male_number:search_agents_no, :]
    
    male_individual_fitness = fitness[0:male_number]
    
    female_individual_fitness = fitness[male_number:search_agents_no]
    
    male_fitness_best_index = np.argmin(male_individual_fitness)
    male_fitness_best_value = male_individual_fitness[male_fitness_best_index]
    
    male_best_fitness_solution = male[male_fitness_best_index, :]
    
    female_fitness_best_index = np.argmin(female_individual_fitness)
    female_fitness_best_value = female_individual_fitness[female_fitness_best_index]
    
    female_best_fitness_solution = female[female_fitness_best_index, :]
    
    new_male = np.matrix(np.zeros((male_number, dim)))
    
    new_female = np.matrix(np.zeros((female_number, dim)))
    
    gene_best_fitness = [0 for i in range(max_iter)]
    
    for t in range(max_iter):
        
        temp = math.exp(-(t / max_iter))
        
        quantity = c1 * math.exp((t - max_iter) / max_iter)
        if quantity > 1:
            quantity = 1
        
        if quantity < food_threshold:
            
            for i in range(male_number):
                for j in range(dim):
                    
                    rand_leader_index = np.random.randint(0, male_number)
                    rand_male = male[rand_leader_index, :]
                    
                    negative_or_positive = np.random.randint(0, 2)
                    flag = vec_flag[negative_or_positive]
                    
                    am = math.exp(
                        -(male_individual_fitness[rand_leader_index] / (male_individual_fitness[i] + np.spacing(1))))
                    new_male[i, j] = rand_male[0, j] + flag * c2 * am * (
                            (solution_bound[1] - solution_bound[0]) * random.random() + solution_bound[0])
            for i in range(female_number):
                for j in range(dim):
                    
                    rand_leader_index = np.random.randint(0, female_number)
                    rand_female = female[rand_leader_index, :]
                    
                    negative_or_positive = np.random.randint(0, 2)
                    flag = vec_flag[negative_or_positive]
                    
                    am = math.exp(-(female_individual_fitness[rand_leader_index] / (
                            female_individual_fitness[i] + np.spacing(1))))
                    new_female[i, j] = rand_female[0, j] + flag * c2 * am * (
                            (solution_bound[1] - solution_bound[0]) * random.random() + solution_bound[0])
        else:
            
            if temp > temp_threshold:  
                
                for i in range(male_number):
                    
                    negative_or_positive = np.random.randint(0, 2)
                    flag = vec_flag[negative_or_positive]
                    for j in range(dim):
                        new_male[i, j] = food[0, j] + flag * c3 * temp * random.random() * (food[0, j] - male[i, j])
                
                for i in range(female_number):
                    
                    negative_or_positive = np.random.randint(0, 2)
                    flag = vec_flag[negative_or_positive]
                    for j in range(dim):
                        new_female[i, j] = food[0, j] + flag * c3 * temp * random.random() * (food[0, j] - female[i, j])
            else:
               
                model = random.random()
                if model < model_threshold:
                    
                    for i in range(male_number):
                        for j in range(dim):
                           
                            fm = math.exp(-female_fitness_best_value / (male_individual_fitness[i] + np.spacing(1)))
                            new_male[i, j] = male[i, j] + c3 * fm * random.random() * (
                                    quantity * male_best_fitness_solution[0, j] - male[i, j])
                   
                    for i in range(female_number):
                        for j in range(dim):
                           
                            ff = math.exp(-male_fitness_best_value / (female_individual_fitness[i] + np.spacing(1)))
                            new_female[i, j] = female[i, j] + c3 * ff * random.random() * (
                                    quantity * female_best_fitness_solution[0, j] - female[i, j])
                else:
                 
                    for i in range(male_number):
                        for j in range(dim):
                           
                            mm = math.exp(-female_individual_fitness[i] / (male_individual_fitness[i] + np.spacing(1)))
                            new_male[i, j] = male[i, j] + c3 * random.random() * mm * (
                                    quantity * female[i, j] - male[i, j])
               
                    for i in range(female_number):
                        for j in range(dim):
                          
                            mf = math.exp(-male_individual_fitness[i] / (female_individual_fitness[i] + np.spacing(1)))
                            new_female[i, j] = female[i, j] + c3 * random.random() * mf * (
                                    quantity * male[i, j] - female[i, j])
                
                    negative_or_positive = np.random.randint(0, 2)
                    egg = vec_flag[negative_or_positive]
                    if egg == 1:
                      
                        male_best_fitness_index = np.argmax(male_individual_fitness)
                        new_male[male_best_fitness_index, :] = solution_bound[0] + random.random() * (
                                solution_bound[1] - solution_bound[0])
                    
                        female_best_fitness_index = np.argmax(female_individual_fitness)
                        new_female[female_best_fitness_index, :] = solution_bound[0] + random.random() * (
                                solution_bound[1] - solution_bound[0])

        for j in range(male_number):
           
            flag_low = new_male[j, :] < solution_bound[0]
            flag_high = new_male[j, :] > solution_bound[1]
            new_male[j, :] = (np.multiply(new_male[j, :], ~(flag_low + flag_high))) + np.multiply(solution_bound[1], flag_high) +np.multiply(solution_bound[0], flag_low)
          
            y = chung_reynolds(new_male[j, :])
          
            if y < male_individual_fitness[j]:
               
                male_individual_fitness[j] = y
               
                male[j, :] = new_male[j, :]
      
        male_current_best_fitness_index = np.argmin(male_individual_fitness)
    
        male_current_best_fitness = male_individual_fitness[male_current_best_fitness_index]
     
        for j in range(female_number):
          
            flag_low = new_female[j, :] < solution_bound[0]
            flag_high = new_female[j, :] > solution_bound[1]
            new_female[j, :] = (np.multiply(new_female[j, :], ~(flag_low + flag_high))) + np.multiply(solution_bound[1], flag_high) +np.multiply(solution_bound[0], flag_low)
         
            y = chung_reynolds(new_female[j, :])
        
            if y < female_individual_fitness[j]:
             
                female_individual_fitness[j] = y
               
                female[j, :] = new_female[j, :]
  
        female_current_best_fitness_index = np.argmin(female_individual_fitness)
     
        female_current_best_fitness = male_individual_fitness[female_current_best_fitness_index]
     
        if male_current_best_fitness < male_fitness_best_value:
          
            male_best_fitness_solution = male[male_current_best_fitness_index, :]
           
            male_fitness_best_value = male_current_best_fitness
     
        if female_current_best_fitness < female_fitness_best_value:
     
            female_best_fitness_solution = female[female_current_best_fitness_index, :]
    
            female_fitness_best_value = female_current_best_fitness
        if male_current_best_fitness < female_current_best_fitness:
            gene_best_fitness[t] = male_current_best_fitness
        else:
            gene_best_fitness[t] = female_current_best_fitness
      
        if male_fitness_best_value < female_fitness_best_value:
            gy_best = male_fitness_best_value
         
            food = male_best_fitness_solution
        else:
            gy_best = female_fitness_best_value
   
            food = female_best_fitness_solution
    return food, gy_best, gene_best_fitness
